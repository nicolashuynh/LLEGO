import ast
from typing import Dict, List, Tuple, Union

import numpy as np
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor


def parse_cart_to_dict(
    cart_model: Union[DecisionTreeClassifier, DecisionTreeRegressor],
    feature_names: List,
    task_type: str,
    precision: int = 4,
) -> Tuple[Dict, str]:
    """
    Parse a CART model to a dictionary
    """
    assert task_type in [
        "classification",
        "regression",
    ], f"Task type {task_type} not supported"

    def tree_to_dict(
        decision_tree: Union[DecisionTreeClassifier, DecisionTreeRegressor],
        feature_names: List,
        precision: int,
    ):
        tree_ = decision_tree.tree_

        def recurse(node):

            # leaf node
            if tree_.children_left[node] == tree_.children_right[node]:
                values = tree_.value[node]
                if task_type == "regression":
                    return {"value": f"{values[0][0]:.{precision}f}"}
                else:
                    return {"value": np.argmax(values)}

            else:  # decision node
                feature = feature_names[tree_.feature[node]]
                threshold = tree_.threshold[node]
                left_subtree = recurse(tree_.children_left[node])
                right_subtree = recurse(tree_.children_right[node])
                return {
                    feature: {
                        f"<= {threshold:.{precision}f}": left_subtree,
                        f"> {threshold:.{precision}f}": right_subtree,
                    }
                }

        return recurse(0)

    n_features_in = cart_model.n_features_in_
    assert len(feature_names) == n_features_in

    # parsed tree in dict
    parsed_tree_dict = tree_to_dict(cart_model, feature_names, precision)

    # # native text representation of the tree provided by sklearn
    native_tree_representation = tree.export_text(
        cart_model, feature_names=feature_names
    )

    return parsed_tree_dict, native_tree_representation


def parse_string_to_dict(llm_output: str) -> Dict:
    """
    Parse LLM generated string output to a dictionary representation of the tree
    Args:
        llm_output: string output generated by LLM
    Return:
        parsed_dict: parsed dictionary
    """
    parsed_dict = ast.literal_eval(llm_output)
    assert isinstance(parsed_dict, dict)
    return parsed_dict
